using System;

namespace C17_Ex01_1
{
    class Program
    {
        public const int k_NumberOfUserInputs = 4;
        public const int k_NumberOfDigits = 4;

        public enum eOrder
        {
            None,
            Asc,
            Desc
        };
        
        public static void Main()
        {
            int io_bineryNumbersLengthSum = 0;
            int io_counterOfAscendingNums = 0;
            int io_counterOfDescendingNums = 0;
            int io_numbersSum = 0;
            int interactionsCounter = 1;

            Console.WriteLine("Please enter {0} numbers with {1} digits each: \n", k_NumberOfUserInputs, k_NumberOfDigits);

            while (interactionsCounter <= k_NumberOfUserInputs)
            {
                int numberFromUser;

                Console.Write("Number {0}: ", interactionsCounter);
                string numberUserInput = Console.ReadLine();

                if (string.IsNullOrEmpty(numberUserInput) || numberUserInput.Length != 4 || !int.TryParse(numberUserInput, out numberFromUser) || numberFromUser <= 0)
                {
                    Console.WriteLine("invalid input, please try again!");
                    continue;
                }

                string numberInBinary = Helper.DecimalToBinary(numberFromUser);
                io_bineryNumbersLengthSum += numberInBinary.Length;

                Console.WriteLine("Number {0} in binary: {1}", interactionsCounter, numberInBinary);

                eOrder eNumOrder = Helper.CheckAscendingOrDescendingNumber(numberFromUser);

                //int isNumAscendingOrDescending = CheckAscendingOrDescendingNumber(numberFromUser);
                if (eNumOrder == eOrder.Asc)
                {
                    io_counterOfAscendingNums++;
                }
                else if (eNumOrder == eOrder.Desc)
                {
                    io_counterOfDescendingNums++;
                }

                io_numbersSum += numberFromUser;
                interactionsCounter++;
            }
            Console.WriteLine("===============================================");
           
            float avgOfBinaryNumLengths = (float)io_bineryNumbersLengthSum / k_NumberOfUserInputs;
            float avgOfNumbers = (float)io_numbersSum / k_NumberOfUserInputs;

            Console.WriteLine("The avarage of binary numbers lengths is {0}", avgOfBinaryNumLengths);
            Console.WriteLine("There are {0} numbers which are ascending series and {1} which are descending",
                io_counterOfAscendingNums, io_counterOfDescendingNums);
            Console.WriteLine("The avarage of numbers inserted is {0}", avgOfNumbers);

            Console.WriteLine("\nPress 'Enter' to exit the program!");
            Console.ReadLine();
        }
    }
}
